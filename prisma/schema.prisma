// This is your Prisma schema file         
// learn more about it in the docs https//pris.ly/d/prisma-schema

generator client {
  provider  =     "prisma-client-js"
}

datasource db {
  provider  =     "sqlite"
  url       =     env("DATABASE_URL")
}

model Tenant {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  users           User[]
  sites           Site[]
  leadGuests      LeadGuest[]
}

model Site {
  id              Int       @id @default(autoincrement())
  name            String  
  tenant          Tenant    @relation(fields: [tenantId], references: [id])
  tenantId        Int
  unitTypes       UnitType[]
}

model User {
  id              Int       @id @default(autoincrement())
  username        String    @unique
  name            String  
  password        String
  tenant          Tenant    @relation(fields: [tenantId], references: [id])
  tenantId        Int
  email           String
  roles           Role[]             
}

model Role {
  id              Int       @id @default(autoincrement())
  user            User      @relation(fields:[userId], references: [id])
  userId          Int
  role            String    
}

model UnitType {
    id            Int       @id @default(autoincrement())
    name          String  
    site          Site      @relation(fields:[siteId], references: [id])       
    siteId        Int
    units         Unit[]
}

model Unit {
    id            Int       @id @default(autoincrement())
    name          String   
    unitType      UnitType  @relation(fields:[unitTypeId], references: [id])      
    unitTypeId    Int
    bookings      Booking[]
    calendarEntries  Calendar[]
}

model LeadGuest {
    id            Int       @id @default(autoincrement())
    firstName     String         
    lastName      String         
    address1      String         
    address2      String         
    townCity      String         
    postcode      String         
    tel           String         
    email         String         
    password      String
    tenant        Tenant    @relation(fields: [tenantId], references: [id])
    tenantId      Int
    bookings      Booking[]
}

model Booking {
    id            Int       @id @default(autoincrement())
    start         DateTime         
    end           DateTime 
    unit          Unit      @relation(fields: [unitId], references: [id])      
    unitId        Int          
    totalFee      Float  
    leadGuest     LeadGuest     @relation(fields: [leadGuestId], references: [id])
    leadGuestId   Int
    payments      Payment[]
    guests        BookingGuest[]
    pets          BookingPet[]
    vehicles      BookingVehicle[]     
    calendarEntries  Calendar[]
}

model Calendar {
  id              String    @id
  date            DateTime  
  unit            Unit      @relation(fields: [unitId], references:[id])
  unitId          Int       
  booking         Booking?  @relation(fields: [bookingId], references: [id])
  bookingId       Int?       
}

model BookingGuest {
    id            Int       @id @default(autoincrement())
    booking       Booking   @relation(fields:[bookingId], references: [id])     
    bookingId     Int   
    name          String
    age           Int
    start         DateTime         
    end           DateTime
    checkedIn     Boolean
}

model BookingVehicle {
    id            Int       @id @default(autoincrement())
    booking       Booking   @relation(fields:[bookingId], references: [id])     
    bookingId     Int
    vehicleReg    String
    start         DateTime
    end           DateTime
    checkedIn     Boolean
}

model BookingPet {
    id            Int       @id @default(autoincrement())
    booking       Booking   @relation(fields:[bookingId], references: [id])     
    bookingId     Int
    name          String      
    start         DateTime         
    end           DateTime
    checkedIn     Boolean
}

model Payment {
    id            Int       @id @default(autoincrement())
    createdAt     DateTime    
    booking       Booking   @relation(fields:[bookingId], references: [id])     
    bookingId     Int         
    amount        Float
}

model Token {
    id         String    @id @unique
}