// This is your Prisma schema file         
// learn more about it in the docs https//pris.ly/d/prisma-schema

generator client {
  provider  =     "prisma-client-js"
}

datasource db {
  provider  =     "sqlite"
  url       =     env("DATABASE_URL")
}

model Tenant {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  users           User[]
  sites           Site[]
  leadGuests      LeadGuest[]
}

model Site {
  id              Int       @id @default(autoincrement())
  name            String  
  description     String
  address1        String
  address2        String?
  townCity        String
  county          String
  postcode        String
  country         String
  tel             String
  email           String
  website         String
  latitude        Float
  longitude       Float
  tenant          Tenant    @relation(fields: [tenantId], references: [id])
  tenantId        Int
  unitTypes       UnitType[]
  guestTypeGroups GuestTypeGroup[]
  equipmentTypes  EquipmentType[]
  bookingGroups   BookingGroup[]
}

model User {
  id              Int       @id @default(autoincrement())
  username        String    @unique
  name            String  
  password        String
  tenant          Tenant    @relation(fields: [tenantId], references: [id])
  tenantId        Int
  email           String    @unique
  roles           Role[]  
  notes           Note[]           
}

model Role {
  id              Int       @id @default(autoincrement())
  user            User      @relation(fields:[userId], references: [id])
  userId          Int
  role            String    
}

model UnitType {
  id                          Int       @id @default(autoincrement())
  name                        String  
  description                 String
  site                        Site      @relation(fields:[siteId], references: [id])       
  siteId                      Int
  units                       Unit[]
  equipmentTypes              EquipmentType[]
  extraTypes                  ExtraType[]
  unitTypeFeesCalendarEntries UnitTypeFeesCalendar[]
  guestFeesCalendarEntries    GuestFeesCalendar[]
  extraFeesCalendarEntries    ExtraFeesCalendar[]
}

model Unit {
  id                Int       @id @default(autoincrement())
  name              String   
  unitType          UnitType  @relation(fields:[unitTypeId], references: [id])      
  unitTypeId        Int
  bookings          Booking[]
  calendarEntries   Calendar[]
}

model LeadGuest {
  id            Int       @id @default(autoincrement())
  firstName     String         
  lastName      String         
  address1      String         
  address2      String         
  townCity      String
  county        String         
  postcode      String
  country       String         
  tel           String         
  email         String         
  password      String
  tenant        Tenant    @relation(fields: [tenantId], references: [id])
  tenantId      Int
  bookings      Booking[]
  notes         Note[]
}

model GuestTypeGroup {
  id                      Int         @id @default(autoincrement())
  name                    String
  siteId                  Int
  site                    Site        @relation(fields: [siteId], references: [id])
  order                   Int         @default(0)  
  getAndReportArrivalTime Boolean     @default(false)
  reportOnSiteTonight     Boolean     @default(false)
  reportOnSiteNow         Boolean     @default(false)
  guestTypes              GuestType[]
}

model GuestType {
  id                  Int                 @id @default(autoincrement())
  name                String              @unique
  description         String
  icon                String
  identifierLabel     String              // this is the label to be applied to the field which identies the guest.  For example, in the case of an adult, this would be "Name", for a vehicle, this would be "Registration Number"
  guestTypeGroupId    Int
  guestTypeGroup      GuestTypeGroup      @relation(fields: [guestTypeGroupId], references: [id])
  bookingGuests       BookingGuest[]
  feesCalendarEntries GuestFeesCalendar[]

  @@unique([guestTypeGroupId, name], name: "GuestTypeGroupGuestTypeNameCombo")
}

model EquipmentType {
  id              Int       @id @default(autoincrement())
  name            String    
  description     String
  icon            String
  siteId          Int 
  site            Site      @relation(fields: [siteId], references: [id])
  unitTypes       UnitType[]
}

model ExtraType {
  id                        Int       @id @default(autoincrement())
  name                      String
  description               String
  icon                      String
  unitTypes                 UnitType[]
  bookings                  Booking[]
  ExtraFeesCalendarEntries  ExtraFeesCalendar[]
}

model BookingGroup {
  id        Int         @id @default(autoincrement())
  siteId    Int 
  site      Site        @relation(fields: [siteId], references: [id])
  bookings  Booking[]   
}

model Booking {
  id                Int               @id @default(autoincrement())
  start             DateTime         
  end               DateTime 
  unit              Unit              @relation(fields: [unitId], references: [id])      
  unitId            Int          
  totalFee          Float  
  leadGuest         LeadGuest         @relation(fields: [leadGuestId], references: [id])
  leadGuestId       Int
  payments          Payment[]
  guests            BookingGuest[]   
  extras            ExtraType[]
  calendarEntries   Calendar[]
  status            String
  notes             Note[]
  bookingGroupId    Int             
  bookingGroup      BookingGroup      @relation(fields: [bookingGroupId], references: [id])
  createdAt         DateTime          @default(now())     
  updatedAt         DateTime          @default(now())
}

model Calendar {
  id              String    @id
  date            DateTime  
  unit            Unit      @relation(fields: [unitId], references:[id])
  unitId          Int       
  booking         Booking?  @relation(fields: [bookingId], references: [id])
  bookingId       Int?       
}

model BookingGuest {
  id            Int       @id @default(autoincrement())
  booking       Booking   @relation(fields:[bookingId], references: [id])     
  bookingId     Int   
  name          String
  guestType     GuestType @relation(fields: [guestTypeId], references: [id])
  guestTypeId   Int
  start         DateTime         
  end           DateTime
  arrivalTime   String?
  checkedIn     DateTime?
  checkedOut    DateTime?
  notes         Note[]
}

model UnitTypeFeesCalendar {
  id              Int       @id @default(autoincrement())
  date            DateTime
  unitType        UnitType  @relation(fields: [unitTypeId], references: [id])
  unitTypeId      Int
  feePerNight     Float
  feePerStay      Float
}

model GuestFeesCalendar {
  id              Int       @id @default(autoincrement())
  date            DateTime
  guestType       GuestType @relation(fields: [guestTypeId], references: [id])
  guestTypeId     Int
  unitType        UnitType  @relation(fields: [unitTypeId], references: [id])
  unitTypeId      Int
  feePerNight     Float
  feePerStay      Float     
}

model ExtraFeesCalendar {
  id              Int       @id @default(autoincrement())
  date            DateTime
  extraType       ExtraType @relation(fields: [extraTypeId], references: [id])
  extraTypeId     Int
  unitType        UnitType  @relation(fields: [unitTypeId], references: [id])
  unitTypeId      Int
  feePerNight     Float
  feePerStay      Float     
}

model Payment {
  id            Int       @id @default(autoincrement())
  paymentDate   DateTime    
  booking       Booking   @relation(fields:[bookingId], references: [id])     
  bookingId     Int         
  paymentAmount Float
  paymentMethod String
  Notes         Note[]
}

model Token {
  id         String    @id @unique
}

model Note {
  id                Int             @id @default(autoincrement())
  content           String    
  leadGuestId       Int?
  leadGuest         LeadGuest?      @relation(fields: [leadGuestId], references: [id])
  bookingId         Int?
  booking           Booking?        @relation(fields: [bookingId], references: [id])
  paymentId         Int?
  payment           Payment?        @relation(fields: [paymentId], references: [id])
  bookingGuestId    Int?
  bookingGuest      BookingGuest?   @relation(fields: [bookingGuestId], references: [id])
  createdOn         DateTime
  userId            Int     
  user              User            @relation(fields: [userId], references: [id])
  noteType          String  
}